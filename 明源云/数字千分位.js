// 设计一个函数，使用正则表达式将数字转换成千分位格式，比如 1234567 => 1,234,567

/**
 * 零宽断言
 * 利用正则的零宽度正预测先行断言(?=exp)，
 * 意思是它断言自身出现的位置的后面能匹配表达式exp
 * 数字千分位的特点是，第一个逗号后面数字的个数是3的倍数，正则：/(\d{3})+/；
 * 第一个逗号前最多可以有1至3个数字，正则：/\d1,3/。
 * 加起来就是/\d1,3(\d3)+/，分隔符要从前往后加，就要将前面的数字“87”替换成“87，”，
 * 为什么是87不是874？因为874后面只剩下5位数字，在632后加一个分隔符后，将只剩下97，
 * 不符合千分位要求，所以第一个分隔符后面的数字位数必须是3的倍数。
 * 要匹配数字87，又要保证87后面数字位数是3的倍数，并且要将匹配的87替换成“87，”，就要用到(?=exp)
 *
 * @refer 参考http://deerchao.net/tutorials/regex/regex.htm
 */
function thousands(num) {
  let target = num + ''
  if (typeof target !== 'string') {
    return num
  }
  return target.replace(/\d{1,3}(?=(\d{3})+$)/g, function(s) {
    return s + ','
  })
}

module.exports = thousands
